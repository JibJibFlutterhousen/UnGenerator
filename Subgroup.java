public class Subgroup{
	int n;
	int[] subgroup_as_a_set;
	int size_of_subgroup;
	int element;

	public int get_size_of_subgroup(){
		return this.size_of_subgroup;
	}

	public int get_generator(){
		return this.subgroup_as_a_set[subgroup_as_a_set.length-1];
	}

	public Subgroup(int the_n, int the_element){
		/*
			insert the parameters into the instance variables
		*/
		this.n = the_n;
		this.element = the_element;
		/*
			allocate space for the subgroup as a set assuming |<the_element>| = the_n by inserting the dummy value of -1
		*/
		this.subgroup_as_a_set = new int[this.n];
		for(int i = 0; i < this.n; i++){
			this.subgroup_as_a_set[i] = -1;
		}
		/*
			populate the subgroup as a set with the true values
		*/
		this.subgroup_as_a_set[0] = this.element;
		for(int i = 1; i < this.n; i++){
			this.subgroup_as_a_set[i] = (this.subgroup_as_a_set[i-1] * this.element) % this.n;
		}
		/*
			count the number of unique, non-identity elements are in the subgroup as a set
		*/
		int counter = 1;
		for(int i = 1; i < this.n; i++){
			counter++;
			if(this.subgroup_as_a_set[i] == 1){
				break;
			}
		}
		this.size_of_subgroup = counter;
		/*
			trim the subgroup as a set, only taking the first <size of subgroup> elements of the subgroup as a set and copying them into a temporary array
		*/
		int temp[] = new int[counter];
		for(int i = 0; i < counter; i++){
			temp[i] = subgroup_as_a_set[i];
		}
		this.subgroup_as_a_set = new int[counter];
		this.subgroup_as_a_set = temp;
		/*
			standardize the subgroup as a set by sorting the array from smallest to largest value
		*/
		Un_Generator_Utilities.quickSort(this.subgroup_as_a_set, 0, this.subgroup_as_a_set.length-1);
	}
	public String get_details(){
		String output = "";
		/*
			concatinate the subgroup generated by the element 
		*/
		output += String.format("\t<%d> = { ", this.element);
		for(int i = 0; i < this.size_of_subgroup; i++){
			output += String.format("%d", this.subgroup_as_a_set[i]);
			if(i < this.size_of_subgroup - 1){
				output += String.format(", ");
			}
		}
		output += String.format(" }%n");
		/*
			concatinate |<element>|
		*/
		output += String.format("\t\t|<%d>| = %d%n", this.element, this.size_of_subgroup);
		return output;
	}
}